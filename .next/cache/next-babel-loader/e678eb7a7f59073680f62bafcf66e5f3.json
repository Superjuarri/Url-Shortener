{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from 'react';\nimport fetchUrlData from '../../lib/fetchUrlData';\nimport { UrlsContext } from '../../contexts/UrlsContext';\nimport { UrlForm, FormInput, FormButton } from './styles';\n\nvar Form = function Form() {\n  var _useContext = useContext(UrlsContext),\n      links = _useContext.links,\n      linksDispatch = _useContext.linksDispatch;\n\n  var _useState = useState(''),\n      url = _useState[0],\n      setUrl = _useState[1];\n\n  var handleSubmit = function handleSubmit(e) {\n    var urlData;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetchUrlData(url));\n\n          case 3:\n            urlData = _context.sent;\n\n            if (!(urlData.url == 'Enter a valid URL.' || urlData.url == 'This field may not be blank.')) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            linksDispatch({\n              type: 'ADD_LINK',\n              url: urlData\n            });\n            setUrl('');\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    localStorage.setItem('urls', JSON.stringify(links));\n    console.log(links);\n  }, [links]);\n  return __jsx(UrlForm, {\n    onSubmit: handleSubmit\n  }, __jsx(FormInput, {\n    type: \"text\",\n    placeholder: \"Url\",\n    value: url,\n    onChange: function onChange(e) {\n      return setUrl(e.target.value);\n    }\n  }), __jsx(FormButton, {\n    onClick: function onClick(e) {\n      return handleSubmit(e);\n    }\n  }, \"Shorten It!\"));\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}